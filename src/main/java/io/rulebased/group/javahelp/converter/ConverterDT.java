// *** WARNING: DO NOT MODIFY *** This is a generated Java source code! 
// 
// Generated by LF-ET 2.2.0 (220224a), https://www.lohrfink.de/lfet
// From decision table
// "/opt/data/github/rulebased-group/javahelp-to-antora-converter/src/main/resources/Converter.lfet"
// 11.04.2022 00:38
// 
// Prolog Standard ---->
// profile LFET.Java.Prolog.Standard.Interface.ini not found
// used LF-ET 2.2.0 (220224a) build in default

package io.rulebased.group.javahelp.converter;

import javax.annotation.Generated;

@Generated("LF-ET")
@SuppressWarnings("UnnecessaryFullyQualifiedName")
interface ConverterDT<T>
{
 
    // Prolog Standard <----

    // Prolog Decision Table ---->
    // $$Package=io.rulebased.group.javahelp.converter
    // Prolog Decision Table <----
    
    /** 
     * <b>B02: args size =</b><br>
     * <br>
     * <b>B02/01: = 0 - without arguments called</b>
     */
    boolean isArgsSizeEqual_Equal0(T model);
    
    /** 
     * <b>B02: args size =</b><br>
     * <br>
     * <b>B02/02: = 1 - with one argument called</b>
     */
    boolean isArgsSizeEqual_Equal1(T model);
    
    /** 
     * <b>B03: exists config file</b>
     */
    boolean isExistsConfigFile(T model);
    
    /** 
     * <b>B04: input file type =</b><br>
     * <br>
     * <b>B04/01: F - File</b>
     */
    boolean isInputFileTypeEqual_F(T model);
    
    /** 
     * <b>A01: set config file name</b><br>
     * <br>
     * <b>A01/01: default - converter-config.yaml</b>
     */
    void doSetConfigFileName_Default(T model);
    
    /** 
     * <b>A01: set config file name</b><br>
     * <br>
     * <b>A01/02: args - </b>
     */
    void doSetConfigFileName_Args(T model);
    
    /** 
     * <b>A02: error</b><br>
     * <br>
     * // $$Enum.Plain<br>
     * <br>
     * The enum generation has been triggered in project.ini by:<br>
     * - <b>ide.Java.InterfaceEnum.001</b>: Symbol; Title; IncludeTagsText = $$Enum.Plain; MethodName = EnumName;
     */
    void doError(ConverterDT.Error arg0, T model);
    
    /** 
     * <b>A03: read config file as yaml</b>
     */
    void doReadConfigFileAsYaml(T model);
    
    /** 
     * <b>A04: set input facade</b><br>
     * <br>
     * // $$Enum.Plain<br>
     * <br>
     * The enum generation has been triggered in project.ini by:<br>
     * - <b>ide.Java.InterfaceEnum.001</b>: Symbol; Title; IncludeTagsText = $$Enum.Plain; MethodName = EnumName;
     */
    void doSetInputFacade(ConverterDT.SetInputFacade arg0, T model);
    
    /** 
     * <b>A05: start migration</b>
     */
    void doStartMigration(T model);
    
    void doTrace(java.lang.String dtName, java.lang.String version, int rules, int rule, T model);
    
    /** 
     * <b>A02: error</b><br>
     * <br>
     * // $$Enum.Plain<br>
     * <br>
     * The enum generation has been triggered in project.ini by:<br>
     * - <b>ide.Java.InterfaceEnum.001</b>: Symbol; Title; IncludeTagsText = $$Enum.Plain; MethodName = EnumName;
     */
    enum Error
    {
        /** 
         * <b>A02: error</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>A02/01: MA - Two many arguments, please call Converter with path to config.yaml!</b>
         */
        $001("MA", "Two many arguments, please call Converter with path to config.yaml!"),
        
        /** 
         * <b>A02: error</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>A02/02: MCF - %s file is missing.</b>
         */
        $002("MCF", "%s file is missing."),
        
        /** 
         * <b>A02: error</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>A02/03: NSIT - Directory as input is not supported.</b>
         */
        $003("NSIT", "Directory as input is not supported.");
        
        private final String symbol;
        
        private final String title;
        
        Error(String symbol, String title)
        {
            this.symbol = symbol;
            this.title = title;
        }
        
        public String getSymbol()
        {
            return symbol;
        }
        
        public String getTitle()
        {
            return title;
        }
    }
    
    /** 
     * <b>A04: set input facade</b><br>
     * <br>
     * // $$Enum.Plain<br>
     * <br>
     * The enum generation has been triggered in project.ini by:<br>
     * - <b>ide.Java.InterfaceEnum.001</b>: Symbol; Title; IncludeTagsText = $$Enum.Plain; MethodName = EnumName;
     */
    enum SetInputFacade
    {
        /** 
         * <b>A04: set input facade</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>A04/01: JAR - Jar file facade</b>
         */
        $001("JAR", "Jar file facade");
        
        private final String symbol;
        
        private final String title;
        
        SetInputFacade(String symbol, String title)
        {
            this.symbol = symbol;
            this.title = title;
        }
        
        public String getSymbol()
        {
            return symbol;
        }
        
        public String getTitle()
        {
            return title;
        }
    }

    // Epilog Standard ---->
    // profile LFET.Java.Epilog.Standard.Interface.ini not found
    // used LF-ET 2.2.0 (220224a) build in default

}
 
// Epilog Standard <----

// End of generated Java source code
// Generated by LF-ET 2.2.0 (220224a), https://www.lohrfink.de/lfet

