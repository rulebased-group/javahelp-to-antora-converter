// *** WARNING: DO NOT MODIFY *** This is a generated Java source code! 
// 
// Generated by LF-ET 2.2.0 (220224a), https://www.lohrfink.de/lfet
// From decision table
// "/opt/data/github/rulebased-group/javahelp-to-antora-converter/src/main/resources/ConvertAnchor.lfet"
// 24.04.2022 02:33
// 
// Prolog Standard ---->
// profile LFET.Java.Prolog.Standard.Interface.ini not found
// used LF-ET 2.2.0 (220224a) build in default

package io.rulebased.group.javahelp.converter.antora.convert.anchor;

import javax.annotation.Generated;

@Generated("LF-ET")
@SuppressWarnings("UnnecessaryFullyQualifiedName")
interface ConvertAnchorDT<T>
{
 
    // Prolog Standard <----

    // Prolog Decision Table ---->
    // $$Package=io.rulebased.group.javahelp.converter.antora.convert.anchor
    // Prolog Decision Table <----
    
    /** 
     * <b>B02: current element is ...</b><br>
     * <br>
     * // $$Enum.Plain<br>
     * <br>
     * The enum generation has been triggered in project.ini by:<br>
     * - <b>ide.Java.InterfaceEnum.001</b>: Symbol; Title; IncludeTagsText = $$Enum.Plain; MethodName = EnumName;
     */
    boolean isCurrentElementIs(ConvertAnchorDT.CurrentElementIs arg0, T model);
    
    /** 
     * <b>B03: contains current element child elements</b>
     */
    boolean isContainsCurrentElementChildElements(T model);
    
    /** 
     * <b>B04: next child element exists</b>
     */
    boolean isNextChildElementExists(T model);
    
    /** 
     * <b>B05: current element type is ...</b><br>
     * <br>
     * // $$Enum.Plain<br>
     * <br>
     * The enum generation has been triggered in project.ini by:<br>
     * - <b>ide.Java.InterfaceEnum.001</b>: Symbol; Title; IncludeTagsText = $$Enum.Plain; MethodName = EnumName;
     */
    boolean isCurrentElementTypeIs(ConvertAnchorDT.CurrentElementTypeIs arg0, T model);
    
    /** 
     * <b>B06: anchor text is empty</b>
     */
    boolean isAnchorTextIsEmpty(T model);
    
    /** 
     * <b>A01: extract anchor target</b>
     */
    void doExtractAnchorTarget(T model);
    
    /** 
     * <b>A02: extract anchor text</b>
     */
    void doExtractAnchorText(T model);
    
    /** 
     * <b>A03: create xref link</b>
     */
    void doCreateXrefLink(T model);
    
    void doTrace(java.lang.String dtName, java.lang.String version, int rules, int rule, T model);
    
    /** 
     * <b>B02: current element is ...</b><br>
     * <br>
     * // $$Enum.Plain<br>
     * <br>
     * The enum generation has been triggered in project.ini by:<br>
     * - <b>ide.Java.InterfaceEnum.001</b>: Symbol; Title; IncludeTagsText = $$Enum.Plain; MethodName = EnumName;
     */
    enum CurrentElementIs
    {
        /** 
         * <b>B02: current element is ...</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>B02/01: a - anchor</b>
         */
        $001("a", "anchor");
        
        private final String symbol;
        
        private final String title;
        
        CurrentElementIs(String symbol, String title)
        {
            this.symbol = symbol;
            this.title = title;
        }
        
        public String getSymbol()
        {
            return symbol;
        }
        
        public String getTitle()
        {
            return title;
        }
    }
    
    /** 
     * <b>B05: current element type is ...</b><br>
     * <br>
     * // $$Enum.Plain<br>
     * <br>
     * The enum generation has been triggered in project.ini by:<br>
     * - <b>ide.Java.InterfaceEnum.001</b>: Symbol; Title; IncludeTagsText = $$Enum.Plain; MethodName = EnumName;
     */
    enum CurrentElementTypeIs
    {
        /** 
         * <b>B05: current element type is ...</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>B05/01: T - TextNode</b>
         */
        $001("T", "TextNode"),
        
        /** 
         * <b>B05: current element type is ...</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>B05/02: E - Element</b>
         */
        $002("E", "Element");
        
        private final String symbol;
        
        private final String title;
        
        CurrentElementTypeIs(String symbol, String title)
        {
            this.symbol = symbol;
            this.title = title;
        }
        
        public String getSymbol()
        {
            return symbol;
        }
        
        public String getTitle()
        {
            return title;
        }
    }

    // Epilog Standard ---->
    // profile LFET.Java.Epilog.Standard.Interface.ini not found
    // used LF-ET 2.2.0 (220224a) build in default

}
 
// Epilog Standard <----

// End of generated Java source code
// Generated by LF-ET 2.2.0 (220224a), https://www.lohrfink.de/lfet

