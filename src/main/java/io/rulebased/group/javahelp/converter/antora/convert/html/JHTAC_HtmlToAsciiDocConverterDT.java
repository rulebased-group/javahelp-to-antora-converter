// *** WARNING: DO NOT MODIFY *** This is a generated Java source code! 
// 
// Generated by LF-ET 2.2.0 (220224a), https://www.lohrfink.de/lfet
// From decision table
// "/opt/data/github/rulebased-group/javahelp-to-antora-converter/src/main/resources/JHTAC_HtmlToAsciiDocConverter.lfet"
// 18.04.2022 00:22
// 
// Prolog Standard ---->
// profile LFET.Java.Prolog.Standard.Interface.ini not found
// used LF-ET 2.2.0 (220224a) build in default

package io.rulebased.group.javahelp.converter.antora.convert.html;

import javax.annotation.Generated;

@Generated("LF-ET")
@SuppressWarnings("UnnecessaryFullyQualifiedName")
interface JHTAC_HtmlToAsciiDocConverterDT<T>
{
 
    // Prolog Standard <----

    // Prolog Decision Table ---->
    // $$Package=io.rulebased.group.javahelp.converter.antora.convert.html
    // Prolog Decision Table <----
    
    /** 
     * <b>B02: contains current element child elements</b>
     */
    boolean isContainsCurrentElementChildElements(T model);
    
    /** 
     * <b>B03: next element exists</b>
     */
    boolean isNextElementExists(T model);
    
    /** 
     * <b>B04: current element is ...</b><br>
     * <br>
     * // $$Enum.Plain<br>
     * <br>
     * The enum generation has been triggered in project.ini by:<br>
     * - <b>ide.Java.InterfaceEnum.001</b>: Symbol; Title; IncludeTagsText = $$Enum.Plain; MethodName = EnumName;
     */
    boolean isCurrentElementIs(JHTAC_HtmlToAsciiDocConverterDT.CurrentElementIs arg0, T model);
    
    /** 
     * <b>B05: text is Â none breaking space</b>
     */
    boolean isTextIsNoneBreakingSpace(T model);
    
    /** 
     * <b>A01: extract image src</b>
     */
    void doExtractImageSrc(T model);
    
    /** 
     * <b>A02: select textbody element</b>
     */
    void doSelectTextbodyElement(T model);
    
    /** 
     * <b>A03: extract anchor</b>
     */
    void doExtractAnchor(T model);
    
    /** 
     * <b>A04: extract text</b><br>
     * <br>
     * // $$Enum.Plain<br>
     * <br>
     * The enum generation has been triggered in project.ini by:<br>
     * - <b>ide.Java.InterfaceEnum.001</b>: Symbol; Title; IncludeTagsText = $$Enum.Plain; MethodName = EnumName;
     */
    void doExtractText(JHTAC_HtmlToAsciiDocConverterDT.ExtractText arg0, T model);
    
    /** 
     * <b>A05: increment current header level</b>
     */
    void doIncrementCurrentHeaderLevel(T model);
    
    /** 
     * <b>A06: linebreak</b>
     */
    void doLinebreak(T model);
    
    void doTrace(java.lang.String dtName, java.lang.String version, int rules, int rule, T model);
    
    /** 
     * <b>B04: current element is ...</b><br>
     * <br>
     * // $$Enum.Plain<br>
     * <br>
     * The enum generation has been triggered in project.ini by:<br>
     * - <b>ide.Java.InterfaceEnum.001</b>: Symbol; Title; IncludeTagsText = $$Enum.Plain; MethodName = EnumName;
     */
    enum CurrentElementIs
    {
        /** 
         * <b>B04: current element is ...</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>B04/01: h1 - header with level 1</b>
         */
        $001("h1", "header with level 1"),
        
        /** 
         * <b>B04: current element is ...</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>B04/02: h2 - header with level 2</b>
         */
        $002("h2", "header with level 2"),
        
        /** 
         * <b>B04: current element is ...</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>B04/03: h3 - header with level 3</b>
         */
        $003("h3", "header with level 3"),
        
        /** 
         * <b>B04: current element is ...</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>B04/04: h4 - header with level 4</b>
         */
        $004("h4", "header with level 4"),
        
        /** 
         * <b>B04: current element is ...</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>B04/05: img - Image</b>
         */
        $005("img", "Image"),
        
        /** 
         * <b>B04: current element is ...</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>B04/06: b - Bold text</b>
         */
        $006("b", "Bold text"),
        
        /** 
         * <b>B04: current element is ...</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>B04/07: i - italic text</b>
         */
        $007("i", "italic text"),
        
        /** 
         * <b>B04: current element is ...</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>B04/08: a - anchor</b>
         */
        $008("a", "anchor"),
        
        /** 
         * <b>B04: current element is ...</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>B04/09: font - font</b>
         */
        $009("font", "font"),
        
        /** 
         * <b>B04: current element is ...</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>B04/10: br - line break</b>
         */
        $010("br", "line break");
        
        private final String symbol;
        
        private final String title;
        
        CurrentElementIs(String symbol, String title)
        {
            this.symbol = symbol;
            this.title = title;
        }
        
        public String getSymbol()
        {
            return symbol;
        }
        
        public String getTitle()
        {
            return title;
        }
    }
    
    /** 
     * <b>A04: extract text</b><br>
     * <br>
     * // $$Enum.Plain<br>
     * <br>
     * The enum generation has been triggered in project.ini by:<br>
     * - <b>ide.Java.InterfaceEnum.001</b>: Symbol; Title; IncludeTagsText = $$Enum.Plain; MethodName = EnumName;
     */
    enum ExtractText
    {
        /** 
         * <b>A04: extract text</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>A04/01: * - surroung with *</b>
         */
        $001("*", "surroung with *"),
        
        /** 
         * <b>A04: extract text</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>A04/02: = - start with '=' multiply with current header level</b>
         */
        $002("=", "start with '=' multiply with current header level"),
        
        /** 
         * <b>A04: extract text</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>A04/03: _ - surround with _</b>
         */
        $003("_", "surround with _"),
        
        /** 
         * <b>A04: extract text</b><br>
         * <br>
         * // $$Enum.Plain<br>
         * <br>
         * <b>A04/04: NONE - extratct only text</b>
         */
        $004("NONE", "extratct only text");
        
        private final String symbol;
        
        private final String title;
        
        ExtractText(String symbol, String title)
        {
            this.symbol = symbol;
            this.title = title;
        }
        
        public String getSymbol()
        {
            return symbol;
        }
        
        public String getTitle()
        {
            return title;
        }
    }

    // Epilog Standard ---->
    // profile LFET.Java.Epilog.Standard.Interface.ini not found
    // used LF-ET 2.2.0 (220224a) build in default

}
 
// Epilog Standard <----

// End of generated Java source code
// Generated by LF-ET 2.2.0 (220224a), https://www.lohrfink.de/lfet

